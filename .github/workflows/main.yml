name: CI

on:
  push:
    branches:
      - main
    #paths:
    #- 'ansible/Dockerfile'  
  pull_request:
    branches:
      - main
    #paths:
    #  - 'ansible/Dockerfile'  

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}  
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          
    - name: install Python
      uses: actions/setup-python@v2
      with:
       python-version: 3
        
    - name: Install ansible
      run: pip install ansible  
    
    - name: packer test command 
      run: packer --version 
    
    - name: ansible test command 
      run: ansible --version 
    
    - name: aws cli test command 
      run: aws ec2 describe-instances 
           
    - name: Checkout code
      uses: actions/checkout@v2

    - name: repo path
      run: pwd
      
    #- name: run packer initialization
    #  working-directory: packer
    #  run: packer init .
      
    #- name: run packer building
    #  working-directory: packer
    #  run: packer build aws-ubuntu.pkr.hcl
    
    #- name: run terraform initialization
    #  working-directory: terraform
    #  run: terraform init
      
    #- name: run terraform planning
    #  working-directory: terraform
    #  run: terraform plan
      
    #- name: run terraform applying
    #  working-directory: terraform
    #  run: terraform apply -auto-approve
      
    #- name: waiting for all instance checks to start ansible
    #  run: |
    #    CHECK=$(aws ec2 describe-instance-status --instance-id $INSTANCE_ID --query InstanceStatuses[].SystemStatus[].Details[].Status --output text)
    #    INSTANCE_ID=$(aws ec2 describe-instances --filters Name=tag:Name,Values=Website --region us-east-1 --query 'Reservations[].Instances[?!contains(State.Name, `terminated`)].InstanceId' --output text)
    #    while [ "$CHECK" != "passed" ]; do
    #      echo $CHECK `date`
    #      CHECK=`aws ec2 describe-instance-status --instance-id $INSTANCE_ID --query InstanceStatuses[].SystemStatus[].Details[].Status --output text`
    #      sleep 5
    #    done
    #    echo CREATED INSTANCE - $INSTANCE_ID
        
    - name: setup ssh and run ansible
      working-directory: ansible
      run: |
        IP=$(aws ec2 describe-instances --filters Name=tag:Name,Values=Website --region us-east-1 --query 'Reservations[].Instances[].PublicIpAddress' --output text)
        
        
        
        mkdir -p ~/.ssh/
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        Host staging
            HostName $IP
            User ubuntu
            IdentityFile ~/.ssh/id_rsa
            StrictHostKeyChecking no
        END
        ssh -i ~/.ssh/id_rsa ubuntu@${IP}
        
        
        
        
        #echo "server1 ansible_host=${IP} ansible_user=ubuntu ansible_ssh_common_args='-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'" > inventory.ini
        #ansible-playbook -i inventory.ini create-container.yml
        #rm inventory.ini
        #echo "instance public ip is ${IP}"
        
    - name: run terraform destruction
      working-directory: terraform
      run: terraform destroy -auto-approve
